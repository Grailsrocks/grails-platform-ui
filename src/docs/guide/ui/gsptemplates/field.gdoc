The @_field.gsp@ template is used to render the [field|uiTags]tag.

The GSP receives the following model:

* fieldClass - The CSS class to use for the primary container of the field HTML, obtained from UI Set config.
* invalidClass - The CSS class to use for the primary container of the form HTML, in the event of a value being invalid, obtained from UI Set config
* classes - A string containing the list of CSS classes to apply to the outer container
* label - The label text or i18n message code to use for the label. If no value specified, must default the rules set out in [field|uiTags]
* labelArgs - An optional list of arguments to use when building the label i18n message
* hint - An optional hint string or i18n code to render with the field
* hintArgs - Optional argument list to accompany the value of "hint"
* invalid - Optional argument. If value is non-null, indicate that the field is or isn't valid using this value only, disregarding the actual field value.
* required - Optional argument. If value is non-null, indicate that the field is or isn't required, disregarding the value of any constraints on a validateable bean property
* name - The name of the field and/or name of the bean property to render the field for. Used as the name attribute of the field.
* bean - Optional. If non-null, field must be rendered for the property resolved using bean[name], using property type and constraints where available to render the appropriate field
* value - Optional. Use as the value of the field even if a the bean property value is different
* default - Optional. Value to use if "value" and the bean field value are null
* type - Optional. A type override for the field, with possible values "text", "checkbox", "radio", "textarea". If specified, this type of HTML input must be used
* attrs - Any extra attributes to pass through - the effect of these is undefined

Example template:

{code:xml}
    <g:if test="${bean}">        
        <f:field bean="${bean}" property="${name}" label="${label}" default="${default}"
            invalid="${invalid}" required="${required}"/>
    </g:if>
    <g:else>
        <f:field property="${name}" label="${label}" default="${default}"
                invalid="${invalid}" required="${required}">
            <input class="${p.joinClasses(values:[classes, error ? 'error' : ''])}"
                type="${type}" name="${name}" value="${value}"/>
            <span class="help-inline" class="${error ? 'error' : ''}" >
                <g:message code="field.hint.${name}" encodeAs="HTML"/>
            </span>
        </f:field>
    </g:else>
{code}

This example uses the Grails Fields plugin to render the field. This is not a complete example (for example it does not handle type overrides), but is sufficient to demonstrate the mechanism.
