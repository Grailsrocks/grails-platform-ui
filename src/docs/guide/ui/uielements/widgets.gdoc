The UI API provides support for a range of widgets for plugins and applications to use. 

For full details see the tag reference section.

h3. Button

The [ui:button|Tags UI] tag renders a button with options for:
* the mode of rendering (input with type submit, button tag, or anchor)
* resolving the text via i18n messages
* different cues to the user to indicate e.g. primary buttons

{code:xml}
<ui:button mode="primary">OK</ui:button>
<ui:button>Save</ui:button>
<ui:button enabled="false">Cancel</ui:button>
<ui:button mode="primary" text="button.ok"/>
<ui:button kind="anchor" href="#" mode="cancel" text="button.cancel"/>
<ui:button kind="submit" mode="primary" text="Send"/>
{code}

h3. Field

The [ui:field|Tags UI] tag lets you specify a field that must be rendered - usually within a form. 

The UI Set is responsible for all structural markup relating to this field, including any required container nodes, the label, per-field errors (if supported) and hints etc. The output depends entirely on the UI Set in use.

The tag supports named fields or "bean" fields where the value comes from a bean in the current page scope. UI Sets will typically use the Grails Fields plugin to do this, but UI Sets are free to use any implementation.

{code:xml}
<ui:field name="field1" type="text" hint="This is a little hint" label="Text field"/>
<ui:field name="field1" type="checkbox" hint="This is an error hint"
    label="Checkbox field with an error" error="\${true}"/>
<ui:field name="field1" type="radio" label="Radio field"/>
<ui:field name="field1" type="textarea" label="Textarea field">Hello world</ui:field>
<ui:field bean="\${form}" name="name"/>
<ui:field bean="\${form}" name="enabled"/>
<ui:field bean="\${form}" name="dateOfBirth"/>
{code}

You can see that the field type is auto-sensed, which can be overriden with "type".

h3. Image

The [ui:image|Tags UI] tag is used to render images that represent content for the user. UI Sets might add some classes, caption or other decoration, perhaps a light box that allows zooming in to a larger version of the image.

{code:xml}
<ui:image uri="/images/product1.png" width="200" title="Our latest product"
    alt="This is our latest product the CLU-NGE3000"/>

<ui:image dir="/images" file="/product2.png" title="Last year's product"
    alt="The FLA-NGE2000 is now obsolete"/>
{code}

h3. Table

The [ui:table|Tags UI] tag is used to render tables of information.

Use just like normal tables, but gives the UI Set/Theme an opportunity to apply extra styling and can count rows.

{code:xml}
<ui:table>
    <thead>
    <tr>
        <ui:th text="table.id"/>
        <ui:th text="table.title"/>
        <ui:th text="table.description"/>
        <ui:th text="table.date"/>
    </tr>
    </thead>
    <tbody>
    <g:each in="${1..10}" var="i">
    <ui:tr>
        <td>${i.encodeAsHTML()}</td>
        <td>The Inbetweeners</td>
        <td>A comedy about teenagers and cl*nge</td>
        <td>26 September 2011</td>
    </ui:tr>
    </g:each>
    </tbody>
</ui:table>
{code}

You must always use @ui:table@ for Theme-compatible table styling.

h3. Table Row

The [ui:tr|Tags UI] tag is used to render a table row. It can only be used in bodies of the [ui:table|Tags UI] tag as it relies on contextual information (row number).

See the @ui:table@ example for usage. UI Sets can easily detect if the row being rendered is odd or not using a model variable.

h3. Table Heading

The [ui:th|Tags UI] tag is used to render a table heading cell.

It makes it easy to provide localized text for the heading, and also gives the UI Set the opportunity to add other decoration or functionality like sorting.

{code:xml}
<ui:table>
    <thead>
    <tr>
        <ui:th text="table.id"/>
        <ui:th text="table.title"/>
        <ui:th text="table.description"/>
        <ui:th text="table.date"/>
    </tr>
    </thead>
    ...
</ui:table>
{code}

The text attribute is translated using your application message bundle.

h3. Link

The [ui:link|Tags UI] tag renders links, with convenience features for i18n. It resolves the text of the link automatically using the controller and action names:

{code:xml}
<ui:link controller="books"/> <%-- Link to default action of BooksController --%>
<ui:link action="list"/> <%-- Link to list action of current controller --%>
{code}

These will use i18n messages of the form: @action.*controllerName*.*actionName*@
    
h3. Messages

The [ui:message|Tags UI] tag used render text messages such as info and warning messages.

{code:xml}
<ui:message type="info" text="alert.message.something.happened"/>
<ui:message type="error" text="alert.message.something.failed"/>
<ui:message type="warning" text="alert.message.something.dodgy"/>
<ui:message type="debug">
    <p>This is some debug output, only for development mode</p>
</ui:message>
{code}

As with most UI tags you can specify text/textArgs attributes or a body. 

There are dynamic methods added to controllers to make it easy to display messages to the user. Just call [displayMessage|Controller Methods]
or [displayFlashMessage|Controller Methods] and then add the following tag to your GSP views using the [ui:displayMessage|Tags UI]:

{code:xml}
<ui:displayMessage/>
{code}

This will render nothing if there is a no message set by the controller. Otherwise the flash and/or request message will be shown.

h3. Pagination

The [ui:paginate|Tags UI] tag renders report pagination controls much like g:paginate, but in a way tha can be customised easily for theming.

The attributes are the same as the normal g:paginate tag:

{code:xml}
<ui:paginate controller="books" total="${totalBooks}"/>
{code}

The underlying UI Set is presented with a data structure containing the links required to render the pagination, but not the markup itslef.

h3. Tabs

Tabbed pages are a familiar and frequently UI element. You can use the [ui:tabs|Tags UI] tag to define a set of tabs, and [ui:tab] tags inside the body of @ui:tabs@ to define the content:

{code:xml}
<%-- Tabs with hardcoded titles and links only --%>
<ui:tabs>
    <ui:tab titles="One" active="true" action="list"/>
    <ui:tab titles="Two" action="search"/>
    <ui:tab titles="Three" action="list"/>
</ui:tabs>

<%-- Tabs with i18n titles and links only --%>
<ui:tabs prefix="my.tab.title">
    <ui:tab title="a" controller="books"/>
    <ui:tab title="b" controller="books" action="search" active="true"/>
    <ui:tab title="c" action="latest"/>
</ui:tabs>

<%-- Tabs with i18n titles and inin content panels only --%>
<ui:tabs prefix="other.tabtitle">
    <ui:tab title="d"><ui:h4>Tab D Content</ui:h4><theme:ipsum size="2"/></ui:tab>
    <ui:tab title="e"><ui:h4>Tab E Content</ui:h4><theme:ipsum size="2"/></ui:tab>
    <ui:tab title="f" action="true"><ui:h4>Tab F Content</ui:h4><theme:ipsum size="2"/></ui:tab>
</ui:tabs>
{code}

The resulting markup may be structurally very different from the UI tags you use in your page, depending on the UI Set's implementation.

h3. Avatar

Display of user avatar images is a common feature of many web apps, especially social ones. External services typically supply the actual images, but how these are rendered/decorated is up to the application.

The [ui:avatar|Tags UI] tag renders such an avatar from a user identity string. What this string is depends on the underlying UI Set's avatar implementation, but this will often be an email address:

{code:xml}
<ui:avatar user="marc@grailsrocks.com" size="50" rating="G" title="An avatar" alt="This is an Avatar"/>
{code}

h3. Navigation



h3. Carousel


