Add the plugin platform as a dependency to your application or plugin, either directly or transitively. To do so directly edit your @BuildConfig.groovy@ to look something like this:

{docx}
    ...
    plugins {
        ...
        compile '\:platform-ui\:1.0.RC1'
    }
{docx}

You can run your code now and browse to @http://localhost:8080/<appname>/platform/ui@, a special page available only in the development environment. From there you can explore some of the plugin platform features, preview UI Sets and Themes etc.

A default unstyled Theme and UI Set are included out of the box. They're not particularly useful although they do provide some proof of concept defaults, so we'll install another to show what's possible.

h3. Installing a theme for the sample application

Installing a theme requires you to introduce a plugin that containes one or more themes, or create your own theme in your app.

Let's use the vanilla Twitter Bootstrap theme.

Add the following to the "plugins" section of your BuildConfig.groovy:

{docx}
    runtime '\:bootstrap-theme\:1.0.RC2'
{docx}

Alternatively you can run @grails install-plugin bootstrap-theme@.

With that done, you'll have the bootrap-theme templates read to go, as well as a transitive dependency on @bootstrap-ui@ which provides the required UI Set templates and resources. This is how many Bootstrap based themes could be written easily to provide different layouts etc, while reusing the same underlying UI Set. It turns out that the UI Set is the biggest piece of work - Themes are easy to implement.

We don't need to do anything to configure the default theme in the app to use the Bootstrap theme because it is the only non-default theme we have installed. Platform UI will use the first installed theme in alphabetical order if we have not told it otherwise.