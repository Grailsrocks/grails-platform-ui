The @\_input.gsp@ template is used to render the [input|uiTags] tag.

h3. Contract

This GSP template must render just the input widget for a single field.

This template must be smart: when rendering a field for a bean property it must attempt to automatically work out the correct field type to use, and to apply relevant constraints from the command or domain class.

These tasks are normally performed using a plugin such as Bean Fields or the preferred Grails Fields.

This template should, where possible, delegate to such a library to avoid reinventing the wheel. However this is not a requirement and you can provide any alternative implementation as long as this contract is honoured.

This is probably the most complicated UI Set template to implement. If possible use an existing implementation.

Your implementation should support:

* Rendering arbitrary fields
* Auto-sensing an appropriate field type for the current field value
* Manual field type overrides
* Rendering fields for an arbitrary property path starting at a root bean
* Relevant user input constraints based on the constraints of the bean (if any)
* Giving a visual indication of whether or not a field is required
* Giving a visual indication of whether there is an error on the field

The @ui:field@ tag handles most of the complexity around this for you.

h3. Variables available

{table}
*Name* | *Description*
id | The HTML id to apply to the input, and for the label to reference
attrs | Any extra attributes to pass through to be applied to the outermost container
inputClass | The CSS class to use for the input element, obtained from UI Set config.
invalidClass | The CSS class to use for the primary container of the form HTML, in the event of a value being invalid, obtained from UI Set config - in addition to the fieldClass value
classes | A string containing the list of CSS classes to apply to the outer container
invalid | If value is Groovy true, indicates that the field isn't valid.
required | If value is Groovy true, indicates that the field is required.
name | The name of the field and/or name of the bean property of the field.
beanObject | The original root bean supplying the value, if any.
value | The value of the field to use if a the bean property value is differentx
type | The explicit type override for the field (see [input|uiTags] tag) if any
{table}

h3. Example template implementation

{docx:xml}
<g:if test="${beanObject}">
    <g:set var="value" value="${beanObject[name]}"/>
</g:if>
<g:if test="${!(type in ['select', 'textarea', 'datepicker'])}">
    <input id="${id}" name="${name.encodeAsHTML()}" 
        class="${p.joinClasses(values:[inputClass, classes])}"
        type="${type}" value="${value?.encodeAsHTML()}"/>
</g:if>
<g:elseif test="${type == 'select'}">
    <g:select id="${id}" name="${name}" value="${value}"
        noSelection="[null:'No value']" from="${[ [value:value] ]}"/>
</g:elseif>
<g:elseif test="${type == 'textarea'}">
    <textarea id="${id}" name="${name}">${value?.encodeAsHTML()}</textarea>
</g:elseif>
<g:elseif test="${type == 'datepicker'}">
    <g:datePicker id="${id}" name="${name}" value="${value}"/>
</g:elseif>
{docx}

This naïve example does not attempt to support bean properties, and does nothing with required or invalid indications. Here is an example using Bean Fields:

{docx:xml}
<bean:inputTemplate>
${field}
</bean:inputTemplate>
<bean:selectTemplate>
${field}
</bean:selectTemplate>
<bean:checkBoxTemplate>
${field}
</bean:checkBoxTemplate>
<bean:radioTemplate>
${field}
</bean:radioTemplate>
<bean:textAreaTemplate>
${field}
</bean:textAreaTemplate>
<g:if test="${beanObject}">        
        <g:if test="${type == 'password'}">
            <bean:field type="password" beanName="dummy"
                bean="${beanObject}" property="${name}" noLabel="${true}"/>
        </g:if>
        <g:else>
            <bean:field beanName="dummy" bean="${beanObject}"
                property="${name}" noLabel="${true}"/>
        </g:else>
</g:if>
<g:else>
    <input id="${id}" class="
        ${p.joinClasses(values:[classes, invalid ? invalidClass : ''])}"
        type="${type}" name="${name}" value="${value}"/>
</g:else>
{docx}

This is again somewhat naïve as for non-bean fields it assumes <input> will cover all the cases, which it obviously will not.
