The @\_field.gsp@ template is used to render the [field|uiTags] tag.

h3. Contract

This GSP template must render all the structural markup required to render a label, input widget and optionally field errors and hints.

The rendering of fields is rather complex. There are various approaches to rendering the markup of input fields, such as Bean Fields and the preferred Grails Fields plugin. This template however is only responsible for the structural layout of the various field elements, not the input itself. For the details of how inputs are actually rendered see the [input|guide:input] template reference. 

There are several contractual considerations in this template.

Your implementation must support:

* The ability for developers to customize the various elements using @ui:fieldLabel@, @ui:fieldHint@, @ui:fieldErrors@ and @ui:fieldInput@. These nested tags that can be used within @ui:field@ simply capture the relevant body markup which is passed in to this tempalte as @customXXXX@ variables
* Support for rendering multiple errors inline if the UI Set is rendering field errors inline

The @ui:field@ tag handles most of the complexity around this for you. Each inner element of the field (label/errors/input/hint) that is not provided via a nested tag will be resolved as appropriate. For example label, hint and error text is resolved using standard Platform UI i18n rules.

h3. Variables available

{table}
*Name* | *Description*
id | The HTML id to apply to the input, and for the label to reference
attrs | Any extra attributes to pass through to be applied to the outermost container
fieldClass | The CSS class to use for the primary container of the field HTML, obtained from UI Set config.
invalidClass | The CSS class to use for the primary container of the form HTML, in the event of a value being invalid, obtained from UI Set config - in addition to the fieldClass value
classes | A string containing the list of CSS classes to apply to the outer container
label | The label text for the label, already resolved against i18n.
hint | An optional hint string to render with the field, already resolved against i18n.
invalid | If value is Groovy true, indicates that the field isn't valid.
required | If value is Groovy true, indicates that the field is required.
name | The name of the field and/or name of the bean property of the field.
beanObject | The original root bean supplying the value, if any.
value | The value of the field to use if a the bean property value is differentx
type | The explicit type override for the field (see [input|uiTags] tag) if any
errors | The list of field error messages, already resolved against i18n. Groovy false if there are no errors.
input | The markup to use for the input field, if @customInput@ has no value
customLabel | The custom label markup to use. If defined, must be used as the full markup for the <label>, but still contained within the structural markup required by the UI Set
customHint | The custom hint markup to use. If defined, must be used as the full markup for the hint, but still contained within the structural markup required by the UI Set
customInput | The custom input markup to use. If defined, must be used as the full markup for the input widget, but still contained within the structural markup required by the UI Set
customErrors | The custom error markup to use. If defined, must be used as the full markup for the errors, but still contained within the structural markup required by the UI Set
{table}

h3. Example template implementation

{docx:xml}
<div class="${p.joinClasses(values:[fieldClass, classes])}">
    <g:if test="${customLabel}">
        ${customLabel}
    </g:if>
    <g:else>
        <label for="${id.encodeAsHTML()}">${label.encodeAsHTML()}</label>
    </g:else>

    <g:if test="${customInput}">
        ${customInput}
    </g:if>
    <g:else>
        ${input}
    </g:else>

    <g:if test="${customHint}">
        ${customHint}
    </g:if>
    <g:elseif test="${hint}">
        <span class="${hintClass}">${hint.encodeAsHTML()}</span>
    </g:elseif>

    <g:if test="${customErrors}">
        ${customErrors}
    </g:if>
    <g:elseif test="${errors}">
        <g:each in="${errors}" var="err">
            <span class="${errorClass}">${err.encodeAsHTML()}</span>
        </g:each>
    </g:elseif>
</div>
{docx}
